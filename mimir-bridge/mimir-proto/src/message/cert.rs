//! definitions related to cert verification.
//!
//! the mimir bridge protocol includes a number of different
//! worker roles, each of which makes one or more cryptographic 
//! commitments during the course of its operations.  we started
//! referring to these commitments as certs at some point...
//!
use mimir_types::{H256,Signature,Address};
use message::DESTS;


// -------------------------------------------------------------------
// ---------------------------- certified ----------------------------


/// cert generated by the mimir `notary` microservice.
///
/// the notary serves the dual purpose of certifying that 
/// a message passed though the bridge, and adding third-party
/// entropy to the trustless routing algorithm.

#[derive(Debug,Copy,Clone,Default,PartialEq,Eq,Serialize,Deserialize)]
pub struct Notary {
    /// signature of the notary.
    pub sig: Signature
}


/// cert generated by the `router` role.
///
/// the route cert serves as cryptographic commitment  by the router 
/// that some set of validators are the legitimate set as per the 
/// trustless routing algorithm.

// NOTE: this is a placeholder payload, for testing purposes
// only. proper implementation requires succinct proof of
// validator graph traversal. ye be warned.  (merkle proof 
// derivative w/ the existing trustless randomization proto
// would do in a pinch tho)

#[derive(Debug,Copy,Clone,Default,PartialEq,Eq,Serialize,Deserialize)]
pub struct Route {
    /// signature of the router.
    pub sig: Signature,

    /// validator destination addresses.
    pub val: [Address;DESTS]
}


/// cert generated by the `validator` role.
///
/// the verify cert is a cryptographic commitment on behalf of
/// the validator, confirming or denying the vailidty of the
/// message payload.

#[derive(Debug,Copy,Clone,Default,PartialEq,Eq,Serialize,Deserialize)]
pub struct Verify {
    /// signature of the validator.
    pub sig: Signature,

    /// flag indicating validator's argument.
    /// zero is okay/agreement case.  full set
    /// of supported codes is TBD.
    pub val: u8
}


/// special case of the `Verify` cert, added by the initial
/// respondent validator.
pub type Oracle = Verify;


/// requester-generated blinding hash
pub type Blind = H256;


/// revealed seed of blinding hash.
pub type Clear = H256;


